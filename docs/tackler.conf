# vim: tabstop=2 shiftwidth=2 smarttab expandtab softtabstop=4 autoindent
#
# Tackler configuration
#
# File format is HOCON (Human-Optimized Config Object Notation)
# https://github.com/typesafehub/config/blob/master/HOCON.md
#
# "CLI:" will show command line interface option for config option
#        if there is one
#
#############################################################################

# Default time zone
#
# Timezone is used if Txn timestamp does not have zone info.
#
# Format is either zone's offset or ZoneID (IANA Time Zone Database),
# for example: "Z", "GMT", "UTC", "+02:00", "Europe/Helsinki"
#
# If timezone is offset, then timestamp is not adjusted based on
# daylight saving time.
#
# If timezone is zone name, then it is adjusted according
# the DST rules for that zone.
#
# timezone = "+02:00"
#    2016-01-01T00:00:00 => 2016-01-01T00:00:00+02:00
#    2016-06-25T00:00:00 => 2016-06-25T00:00:00+02:00
#
# timezone = "Europe/Helsinki"
#    2016-01-01T00:00:00 => 2016-01-01T00:00:00+02:00
#    2016-06-25T00:00:00 => 2016-06-25T00:00:00+03:00
timezone = "Z"


# Base directory path
#
# This is as basepath for all relavite paths in this conf-file.
# Basedir itself could be relative to the location of this conf-file
#
# CLI: --basedir
basedir = ../


# Input section
#
# Settings related for storage and Txns input
input {

  # type of used storage
  #
  # Valid options are: fs, git
  storage = fs

  # Filesystem storage
  fs {
    # Top-level directory of storage tree
    #
    # This is where scanning is started. This could
    # contain e.g. environment variables (see HOCON docs)
    # to restrict scanned set of files.
    #
    # CLI: --input.fs.dir
    dir = "txns"

    # Glob to filter (include) Txn-data
    #
    # For example:
    # - flat directories: "*.txn"
    # - deep shard dirs:  "**.txn"
    #
    # CLI: --input.fs.glob
    glob = "**.txn"
  }

  # git based storage
  git {

    # Path to repository
    #
    # This must point to "bare" section of repository, e.g.
    # to git-directory.
    repository = "tackler-data.git"

    # Git ref
    #
    # This is git ref name (ref or symbolic ref). It is used
    # to define branch or tag to find transaction data.
    # HEAD revision is used for that branch.
    #
    # This could be e.g. "master", "cleared", "Y2016" or git tag.
    # Please see git documentation for information about ref and symbolic refs.
    #
    # CLI: --input.git.ref
    ref = "master"

    # Directory inside git repository where transactions are stored.
    # This is filesystem path inside repository and working copy,
    # and it is relative to the top of repository (working copy) root.
    dir = "txns"

    # Suffix for file names which are processed as transactions.
    suffix = ".txn"
  }
}

# Generic reporting settings
reporting {
  # Selection of reports to print by default
  # Valid options are:
  #   "balance", "balance-group", "register", "equity", "identity"
  #
  # CLI: --reporting.reports "report1" "report2"
  # e.g. --reporting.reports balance register
  reports = ["balance", "balance-group", "register"]

  # Default list of accounts in reports
  #
  # Each entry is regexp which is matched with account name
  # Empty list will include everything
  #
  # Valid values: list of regex as string
  #    accounts = [ "^Income:.*", "^Expenses:.*" ]
  #
  # CLI: --reporting.accounts=[ "^Assets:.*", "^Expenses:.*" ]
  accounts = []

  # Use console for output
  #
  # If applicable reports should also be printed to
  # the console.
  # Valida values: true | false
  #
  # CLI: --reporting.console
  console = true
}

# Report definitions
reports {
  # Balance report
  balance {

    # Title of balance report
    # Valid values: string
    title = "BALANCE"

    # List of accounts to include into report
    #
    # If not set, then reporting.accounts is used as default
    # See reporting.accounts for further information
    // accounts = [ "^Income:.*", "^Expenses:.*"]
  }

  # Balance Group report
  #
  # This report makes multiple balance reports over
  # group of transactions which are grouped based on
  # group-by criteria.
  balance-group {

    # Title of balance group report
    # valid values: string
    title = "BALANCE GROUPS"

    # Group by criteria
    #
    # Group by balances based on criteria.
    # Criteria could be:
    #   "year", "month", "date", "iso-week", "iso-week-date"
    group-by = "month"

    # List of accounts to include into report
    #
    # If not set, then reporting.accounts is used as default
    # See reporting.accounts for further information
    // accounts = ["^Expenses:.*"]
  }

  register {

    # Title of register report
    # Valid values: string
    title = "REGISTER"

    # List of accounts to include into report
    #
    # If not set, then reporting.accounts is used as default
    # See reporting.accounts for further information
    //accounts = []
  }
  
  equity {

    # List of accounts to include into report
    #
    # If not set, then reporting.accounts is used as default
    # See reporting.accounts for further information
    //accounts = []
  }
}

# Include Chart of Accounts from separate file
include "accounts.conf"
